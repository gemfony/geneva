################################################################################
#
# This file is part of the Geneva library collection. The following license
# applies to this file:
#
# ------------------------------------------------------------------------------
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#    http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.
# ------------------------------------------------------------------------------
#
# Note that other files in the Geneva library collection may use a different
# license. Please see the licensing information in each file.
#
################################################################################
#
# Geneva was started by Dr. RÃ¼diger Berlich and was later maintained together
# with Dr. Ariel Garcia under the auspices of Gemfony scientific. For further
# information on Gemfony scientific, see http://www.gemfomy.eu .
#
# The majority of files in Geneva was released under the Apache license v2.0
# in February 2020.
#
# See the NOTICE file in the top-level directory of the Geneva library
# collection for a list of contributors and copyright information.
#
################################################################################
#
# This file holds some configuration options used for the compilation
# of the Geneva library. Copy to your compilation directory and adapt
# as needed. Then configure Geneva with a command line similar to
# "/where/geneva/resides/scripts/prepareBuild.sh ./myGenevaConfig.gcfg"
# Follow the instructions given by the script.


# Where the cmake executable is located
CMAKE="/usr/bin/cmake"

#
# The Boost location parameters.
#
# NOTE: you need to either leave all three parameters empty, or set
# the parameter BOOSTROOT, or set both of BOOSTLIBS and BOOSTINCL.
#
# If you installed a binary Boost distribution you should first try
# leaving all three parameters undefined (commented out).
# If you installed Boost from source using a default installation tree,
# then it should be enough to set BOOSTROOT to the Boost installation prefix.
# If CMake is not able to find the Boost headers/libraries correctly,
# or these are installed at non-standard locations, then you should try
# to set BOOSTLIBS and BOOSTINCL. The folder BOOSTLIBS should be the
# location of the libboost_* libraries, and the folder BOOSTINCL should
# be the location of Boost's 'boost/' headers folder where the file
# 'version.hpp' is found.
#
#BOOSTROOT="/opt/boost"
#BOOSTLIBS="/usr/lib"
#BOOSTINCL="/usr/include"

# Specify the root path of your MPI installation i.e. that among others contains the directories lib/ and bin/
# If empty, CMake searches for a default MPI installation that might not be the desired one if multiple installations exist
MPIROOT=""

# Build mode must be either 'Release', 'Debug', 'RelWithDebInfo',
# 'MinSizeRel' or 'Sanitize'. NOTE: the 'Sanitize' setting is experimental!
# It will default to 'Debug' on unsupported platforms; see
# http://googletesting.blogspot.ru/2014/06/threadsanitizer-slaughtering-data-races.html
BUILDMODE="Debug"

# Whether to build Geneva with testing code
BUILDTESTCODE="1"

# Whether to build Geneva with examples
BUILDEXAMPLES="1"

# Whether to build Geneva with benchmarks
BUILDBENCHMARKS="1"

# Whether to build static code / libraries (experimental!)
BUILDSTATIC="0"

# Whether compilation information should be emitted
VERBOSEMAKEFILE="0"

# Where the Geneva library shall go
INSTALLDIR="/opt/geneva"

# Further linker parameters you might want to provide
LINKEREXTRAFLAGS=""

# Whether to build MPI consumer
BUILDMPICONSUMER="1"

# Whether to build OpenCL examples. Note that this is an experimental feature
BUILDOPENCLEXAMPLES="0"

# Further CMake parameters you might want to provide; these
# will be passed 'verbatim' to CMake's command line
CMAKEEXTRAFLAGS=""

# Further compiler parameters you might want to provide, for instance
# for turning on/off compiler warnings use "-Wextra -Wno-parentheses"
# See below for a number of "specialist flags" triggering different
# behaviour of the compiled Geneva library collection.
CXXEXTRAFLAGS=""

# "Specialist flags" available to fine-tune the behaviour of the Geneva library collection.
# Add to CXXEXTRAFLAGS in order to activate.
#
# -DGENEVA_COMMON_BOUNDED_BUFFER_USE_NOTIFY_ALL :
# Use notify_all instead of "notify_one" for condition variable in GBoundedBufferT
# -DGENEVA_HAP_RANDOM_FACTORY_DEFAULT_ARRAY_SIZE <unsigned integer>:
# The size of a single buffer produced by the random factory
# -DGENEVA_HAP_RANDOM_FACTORY_DEFAULT_BUFFER_SIZE <unsigned integer>:
# The default size of the thread-safe buffer used to store random number packages
# -DGENEVA_COMMON_DEFAULT_BUFFER_SIZE <unsigned integer>:
# The default size of a general thread-safe buffer
# -DGENEVA_HAP_RANDOM_FACTORY_DEFAULT_PUT_WAIT <unsigned integer>:
# The maximum timed wait for put operations in the GRandom-Fractory random queue in milliseconds
# -DGENEVA_HAP_RANDOM_FACTORY_DEFAULT_GET_WAIT <unsigned integer>:
# The maximum timed wait for get operations in the GRandom-Fractory random queue in milliseconds
# -DGENEVA_HAP_RANDOM_FACTORY_SEEDQUEUE_PUT_WAIT <unsigned integer>:
# The maximum timed wait for put operations in the GRandom-Fractory seed queue in milliseconds
# -DGENEVA_HAP_RANDOM_FACTORY_SEED_VECTOR_SIZE <unsigned integer>
# The size of the vector with seeds
