/*
 * This file is part of the Geneva library collection.
 *
 * See the NOTICE file in the top-level directory of the Geneva library
 * collection for a list of contributors and copyright information.
 *
 * The following license applies to the code IN THIS FILE:
 *
 * ***************************************************************************
 *
 * Boost Software License - Version 1.0 - August 17th, 2003
 *
 * Permission is hereby granted, free of charge, to any person or organization
 * obtaining a copy of the software and accompanying documentation covered by
 * this license (the "Software") to use, reproduce, display, distribute,
 * execute, and transmit the Software, and to prepare derivative works of the
 * Software, and to permit third-parties to whom the Software is furnished to
 * do so, all subject to the following:
 *
 * The copyright notices in the Software and this entire statement, including
 * the above license grant, this restriction and the following disclaimer,
 * must be included in all copies of the Software, in whole or in part, and
 * all derivative works of the Software, unless such copies or derivative
 * works are solely in the form of machine-executable object code generated by
 * a source language processor.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE, TITLE AND NON-INFRINGEMENT. IN NO EVENT
 * SHALL THE COPYRIGHT HOLDERS OR ANYONE DISTRIBUTING THE SOFTWARE BE LIABLE
 * FOR ANY DAMAGES OR OTHER LIABILITY, WHETHER IN CONTRACT, TORT OR OTHERWISE,
 * ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
 * DEALINGS IN THE SOFTWARE.
 *
 * ***************************************************************************
 *
 * NOTE THAT THE BOOST-LICENSE DOES NOT APPLY TO ANY OTHER FILES OF THE
 * GENEVA LIBRARY, UNLESS THIS IS EXPLICITLY STATED IN THE CORRESPONDING FILE!
 */

/**
 * This file holds some global definitions used in all of Geneva. In particular, checks for
 * the Boost version being used are done here.
 */

#pragma once

//-----------------------------------------------------------
// Some standard headers needed everywhere
#include <ciso646>


#include <boost/version.hpp>

// Add the define to avoid messages by compiling with boost_version >= 1.74
#if BOOST_VERSION >= 107400
#define BOOST_BIND_GLOBAL_PLACEHOLDERS
#endif 


//-----------------------------------------------------------
// For Microsoft-compatible compilers
#if defined(_MSC_VER)  && (_MSC_VER >= 1020)

// We need to take care of Boost 1.70, which has a problem in Beast with std::max + Windows
#if (BOOST_VERSION==107000)
#define NOMINMAX
#define WIN32_LEAN_AND_MEAN
#endif


#include <winsock2.h>
#include <windows.h>

#endif /* _MSC_VER */
//-----------------------------------------------------------

#include <boost/config.hpp>

/** The current version of the Geneva library */
#define GENEVA_VERSION @GENEVA_API_VERSION@

/** The minimum allowed version of the Boost library */
#define MIN_BOOST_VERSION @GENEVA_MIN_BOOST_API_VERSION@

#if BOOST_VERSION < MIN_BOOST_VERSION
#error "Error: Boost should at least have version @GENEVA_MIN_BOOST_VERSION@ !"
#endif /* BOOST_VERSION */

/** Make sure we use boost filesystem v3 */
#define BOOST_FILESYSTEM_VERSION 3

//-----------------------------------------------------------
// Care for symbols to be exported. We cover here all the
// libraries to avoid extra headers.
#if defined GEM_DYNAMIC && (GEM_DYNAMIC != 0)

#ifdef GEM_COMMON_EXPORTS
#define G_API_COMMON BOOST_SYMBOL_EXPORT
#else
#define G_API_COMMON BOOST_SYMBOL_IMPORT
#endif /* GEM_COMMON_EXPORTS */

#ifdef GEM_HAP_EXPORTS
#define G_API_HAP BOOST_SYMBOL_EXPORT
#else
#define G_API_HAP BOOST_SYMBOL_IMPORT
#endif /* GEM_HAP_EXPORTS */

#ifdef GEM_COURTIER_EXPORTS
#define G_API_COURTIER BOOST_SYMBOL_EXPORT
#else
#define G_API_COURTIER BOOST_SYMBOL_IMPORT
#endif /* GEM_COURTIER_EXPORTS */

#ifdef GEM_GENEVA_EXPORTS
#define G_API_GENEVA BOOST_SYMBOL_EXPORT
#else
#define G_API_GENEVA BOOST_SYMBOL_IMPORT
#endif /* GEM_GENEVA_EXPORTS */

#ifdef GEM_INDIVIDUALS_EXPORTS
#define G_API_INDIVIDUALS BOOST_SYMBOL_EXPORT
#else
#define G_API_INDIVIDUALS BOOST_SYMBOL_IMPORT
#endif /* GEM_INDIVIDUALS_EXPORTS */

#else /* GEM_DYNAMIC undefined */
#define G_API_COMMON
#define G_API_HAP
#define G_API_COURTIER
#define G_API_GENEVA
#define G_API_INDIVIDUALS
#endif /* GEM_DYNAMIC */
//-----------------------------------------------------------

// Check for C++11 and enable some macros, if possible.
// We only support this for Gcc, Clang and Intel compilers.
#define BASE

/** Funnily, on g++ std::pow(x,2) seems to be less efficient than direct multiplication */
#define GSQUARED(X) (X) * (X)

//-----------------------------------------------------------
// Allow to mark functions as deprecated on supported compilers
#ifdef __GNUC__
#define G_DEPRECATED(message) __attribute__ ((deprecated(#message)))
#elif defined(__clang__)
#define G_DEPRECATED(message) __attribute__ ((deprecated(#message)))
#elif defined(_MSC_VER)
#define G_DEPRECATED(message) __declspec(deprecated(#message))
#else
#define G_DEPRECATED(message)
#endif

//-----------------------------------------------------------
